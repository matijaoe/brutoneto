import { load } from 'cheerio'
import {
  basicKebabCase,
  convertFromPercentage,
  localizedTitleCase,
  replaceDiacritics,
  writeFile,
} from '../src/utils'
import { rawHtmlTables } from './data/raw-html-tables'

type PlaceTaxesRecord = {
  jedinica: string
  nizaStopa: number
  visaStopa: number
}

const generateTaxRecords = () => {
  const taxRateRecords: PlaceTaxesRecord[] = []

  const rows = rawHtmlTables
    .map((table) => {
      const $ = load(table)
      const rows = $('table table tbody td')
        .get()
        .map((td) => $(td).text())

      return rows
    })
    .flat()

  for (let i = 0; i < rows.length; i += 3) {
    const jedinica = rows[i]

    taxRateRecords.push({
      jedinica: localizedTitleCase(jedinica),
      nizaStopa: convertFromPercentage(rows[i + 1]),
      visaStopa: convertFromPercentage(rows[i + 2]),
    })
  }

  return taxRateRecords
}

const writeTaxRecords = async (taxRecords: PlaceTaxesRecord[]) => {
  const written = await writeFile(
    'src/generated/porezi.json',
    JSON.stringify(taxRecords, null, 2),
  )
  if (written) {
    console.log('✅ Tax rates written to "/src/generated/porezi.json"')
  } else {
    console.error('❌ Error writing tax rates file')
  }
}
const writeGeneratedCode = async (content: string) => {
  const written = await writeFile('src/generated/places.ts', content)
  if (written) {
    console.log(
      '✅ Places code generated and written to "/src/generated/places.ts"',
    )
  } else {
    console.error('❌ Error writing places type file')
  }
}

const taxRecords = generateTaxRecords()
const placeNames = taxRecords.map((record) => record.jedinica)

const PlaceMap = taxRecords.reduce(
  (acc, record) => {
    const { jedinica, visaStopa, nizaStopa } = record
    const key = basicKebabCase(replaceDiacritics(jedinica))
    acc[key] = {
      name: jedinica,
      taxRateLow: nizaStopa,
      taxRateHigh: visaStopa,
    }
    return acc
  },
  {} as Record<string, { name: string, taxRateLow: number; taxRateHigh: number }>,
)

const places = Object.keys(PlaceMap) as (keyof typeof PlaceMap)[]

import prettier from 'prettier'

const generateCode = async () => {
  const comment = `
    // This file was generated by the "gen-tax-rates.ts" script. 
    // Do not modify it manually.
  `

  const PlaceMap_code = `
    /**
     * Tax rates for different places in Croatia.
     * Generated off of the data from 'porezi.json'.
    */
    export const PlaceMap = ${JSON.stringify(PlaceMap, null, 2)} as const
  `

  const Place_code = `export type Place = keyof typeof PlaceMap`

  const Places_code = `export const places: Place[] = ${JSON.stringify(places, null, 2)} as const`

  const PlaceType_code = `
    /**
     * Type for all places in 'porezi.json'.
    */
    export type PlaceName = ${placeNames.map((place) => `| '${place}'`).join(' ')}
  `

  const content = `${comment}\n\n${PlaceMap_code}\n\n${Place_code}\n\n${Places_code}\n\n${PlaceType_code}`

  const formattedCode = await prettier.format(content, { parser: 'typescript' })

  return formattedCode
}

writeTaxRecords(taxRecords)

writeGeneratedCode(await generateCode())
